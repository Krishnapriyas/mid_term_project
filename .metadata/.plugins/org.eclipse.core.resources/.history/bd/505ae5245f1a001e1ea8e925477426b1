package com.axis.mtb.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.crossstore.ChangeSetPersister.NotFoundException;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.axis.mtb.entity.Seat;
import com.axis.mtb.entity.SeatSelectionRequest;
import com.axis.mtb.service.SeatService;

@RestController
@RequestMapping("/seats")
public class SeatController {

	@Autowired
	private SeatService seatService;

	public SeatController(SeatService seatService) {
		super();
		this.seatService = seatService;
	}

	@GetMapping("/allSeats")
	public List<Seat> getSeats() {
		return seatService.getAllSeat();
	}

	@GetMapping("/getSeatById/{seatId}")
	public Seat getSeatById(@PathVariable Integer seatId) throws NotFoundException {
		return seatService.getSeatById(seatId);
	}

	@PostMapping("/createSeat")
	// @ResponseStatus(HttpStatus.CREATED)
	public Seat createSeat(@RequestBody Seat seat) {
		return seatService.createSeat(seat);
	}

	@PutMapping("/updateSeatById/{seatId}")
	public Seat updateSeatById(@PathVariable Integer seatId, @RequestBody Seat seat) throws NotFoundException {
		return seatService.updateSeatById(seatId, seat);
	}

	@DeleteMapping("/deleteSeatById/{seatId}")
	public void deleteSeatById(@PathVariable Integer seatId) throws NotFoundException {
		seatService.deleteSeatById(seatId);
	}

	@PostMapping("/{showId}/seats")
	public ResponseEntity<String> selectSeats(@PathVariable("showId") Integer showId,
			@RequestBody SeatSelectionRequest seatSelectionRequest) {

		boolean success = seatService.selectSeats(showId, seatSelectionRequest);

		if (success) {
			return ResponseEntity.ok("Seats selected successfully!");
		} else {
			return ResponseEntity.badRequest().body("Failed to select seats.");
		}
	}
}
