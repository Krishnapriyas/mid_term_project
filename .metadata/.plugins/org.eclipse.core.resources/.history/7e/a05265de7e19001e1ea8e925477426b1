package com.axis.mtb.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.crossstore.ChangeSetPersister.NotFoundException;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.axis.mtb.entity.ShowTime;
import com.axis.mtb.service.ShowTimeService;

@RestController
@RequestMapping("/shows")
public class ShowTimeController {

	@Autowired
	private ShowTimeService showTimeService;

	public ShowTimeController(ShowTimeService showTimeService) {
		this.showTimeService = showTimeService;
	}

	@GetMapping("/allShows")
	public List<ShowTime> getAllShowTime() {
		return showTimeService.getAllShowTime();
	}

	@GetMapping("/getShowTimeById/{id}")
	public ShowTime getShowTimeById(@PathVariable Integer id) throws NotFoundException {
		return showTimeService.getShowTimeById(id);
	}

	@GetMapping("/getShowTimeByTheatre/{theatreId}")
	public List<ShowTime> getShowTimeByTheatreId(@PathVariable Integer theatreId) throws NotFoundException {
		return showTimeService.getShowTimeByTheatreId(theatreId);
	}

	@GetMapping("/getShowTimeByTheatreName/{theaterName}")
	public List<ShowTime> getShowTimeByTheatreName(@PathVariable String theaterName) throws NotFoundException {
		return showTimeService.getShowTimeByTheaterName(theaterName);
	}

	@GetMapping("/getShowTimeByMovie/{movieId}")
	public List<ShowTime> getShowTimeByMovie(@PathVariable Integer movieId) throws NotFoundException {
		return showTimeService.getShowTimeByMovieId(movieId);
	}

	/*
	 * @GetMapping("/getShowTimeByMovieName/{movieName}") public List<ShowTime>
	 * getShowTimeByMovieName(@PathVariable String movieName) throws
	 * NotFoundException { return showTimeService.getShowTimeByMovieName(movieName);
	 * }
	 */
	@PostMapping("/createShow")
	@ResponseStatus(HttpStatus.CREATED)
	public ShowTime createShowTime(@RequestBody ShowTime showTime) {
		return showTimeService.createShowTime(showTime);
	}

	@PutMapping("/updateShowTimeById/{id}")
	public ShowTime updateShowTimeById(@PathVariable Integer id, @RequestBody ShowTime showTime)
			throws NotFoundException {
		return showTimeService.updateShowTimeById(id, showTime);
	}

	@DeleteMapping("/deleteShowTimeById/{id}")
	public void deleteShowTimeById(@PathVariable Integer id) throws NotFoundException {
		showTimeService.deleteShowTimeById(id);
	}
}
