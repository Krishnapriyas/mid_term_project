package com.axis.mtb.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.crossstore.ChangeSetPersister.NotFoundException;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.axis.mtb.entity.BookingHistory;
import com.axis.mtb.entity.Movie;
import com.axis.mtb.entity.User;
import com.axis.mtb.service.BookingHistoryService;
import com.axis.mtb.service.MovieService;
import com.axis.mtb.service.UserService;

@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("userView")
public class UserViewController {

	@Autowired
	private UserService userService;

	@Autowired
	private BookingHistoryService bookingHistoryService;
	
	@Autowired
	private MovieService movieService;


	@PutMapping("/updateUserById/{userId}") // verified
	public User updateUserById(@PathVariable Integer userId, @RequestBody User user) throws NotFoundException {
		return userService.updateUserById(userId, user);
	}

	@PutMapping("/updateUserByName/{userName}") // verified
	public User updateUserByName(@PathVariable String userName, @RequestBody User user) throws NotFoundException {
		return userService.updateUserByName(userName, user);
	}

	@GetMapping("/getBookingsById/{bookingId}")
	public BookingHistory getBookingHistroyById(@PathVariable Integer bookingId) throws NotFoundException {
		return bookingHistoryService.getBookingHistoryById(bookingId);

	@GetMapping("/allmovies") // verified
	public List<Movie> getAllMovies() {
		return movieService.getAllMovies();
	}

	@GetMapping("/getMovieById/{movieId}") // verified
	public Movie getMovieById(@PathVariable Integer movieId) throws NotFoundException {
		return movieService.getMovieById(movieId);
	}

	@PostMapping("/createBooking")
	// @ResponseStatus(HttpStatus.CREATED)
	public BookingHistory createBooking(@RequestBody BookingHistory bookinghistory) {
		return bookingHistoryService.createBooking(bookinghistory);
	}

	@PutMapping("/updateBookingById/{bookingHistoryId}")
	public BookingHistory updateBookingById(@PathVariable Integer bookingHistoryId,
			@RequestBody BookingHistory bookinghistory) throws NotFoundException {
		return bookingHistoryService.updateBookingById(bookingHistoryId, bookinghistory);
	}

	@DeleteMapping("/deleteBookingById/{bookingHistoryId}")
	public void deleteBookingById(@PathVariable Integer bookingHistoryId) throws NotFoundException {
		bookingHistoryService.deleteBookingById(bookingHistoryId);
	}

	@DeleteMapping("/cancelBooking/{bookingHistoryId}")
	public void cancelBooking(@PathVariable Integer bookingHistoryId) throws NotFoundException {
		bookingHistoryService.cancelTicket(bookingHistoryId);
	}

}

